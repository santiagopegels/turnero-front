{"version":3,"sources":["helpers/fetch.js","types/types.js","actions/ui.js","actions/queues.js","actions/auth.js","hook/useBodyClass.js","components/auth/LoginScreen.js","router/PublicRoute.js","components/auth/RegisterScreen.js","router/PrivateRoute.js","components/queue/QueueCard.js","components/queue/CreateQueueModal.js","components/dashboard/DashboardScreen.js","components/queue/SetNamePlaceModal.js","context/socket.js","components/queue/QueueMainScreen.js","components/screen/SelectQueues.js","components/screen/PublicNumbersScreen.js","components/screen/PublicScreen.js","components/printer/PrinterMessage.js","components/printer/PrinterOptions.js","components/printer/PrinterScreen.js","router/AppRouter.js","reducers/authReducer.js","reducers/queueReducer.js","reducers/uiReducer.js","reducers/rootReducer.js","store/store.js","TurneroApp.js","index.js"],"names":["baseUrl","process","fetchWithoutToken","endpoint","data","method","url","fetch","headers","body","JSON","stringify","fetchWithToken","token","localStorage","getItem","types","startLoading","type","stopLoading","queuesStartLoading","dispatch","a","resp","json","queueLoaded","queues","console","log","payload","addNewQueue","queue","login","user","checkingFinish","startLogout","clear","logout","addBodyClass","className","document","classList","add","removeBodyClass","remove","useBodyClass","useEffect","Array","map","LoginScreen","useDispatch","history","useHistory","loading","useSelector","state","ui","size","span","name","layout","wrapperCol","initialValues","remember","onFinish","email","password","status","setItem","Date","getTime","uid","startLogin","then","res","message","error","onFinishFailed","errorInfo","Item","initialValue","rules","required","placeholder","Password","htmlType","block","ghost","onClick","push","PublicRoute","isAuthenticated","Component","component","rest","props","to","RegisterScreen","startRegister","dependencies","getFieldValue","validator","_","value","Promise","reject","Error","resolve","PrivateRoute","children","location","pathname","QueueCard","handleNextTicket","actualNumber","title","description","headStyle","style","lastNumber","ticketsAttended","length","tickets","_id","CreateQueueModal","useState","isModalVisible","setIsModalVisible","onCreate","values","Form","useForm","form","shape","icon","PlusOutlined","visible","onOk","validateFields","resetFields","catch","info","onCancel","modifier","label","DashboardScreen","keySelected","collapsed","setCollapsed","Header","Layout","Sider","Content","minHeight","trigger","collapsible","theme","mode","selectedKeys","ForkOutlined","VideoCameraOutlined","UploadOutlined","padding","justify","align","React","createElement","MenuUnfoldOutlined","MenuFoldOutlined","placement","danger","LogoutOutlined","SetNamePlaceModal","isVisible","closable","cancelButtonProps","hidden","socket","socketio","SocketContext","createContext","QueueMainScreen","queuesLocal","setQueuesLocal","isSetNamePlaceModalVisible","setIsSetNamePlaceModalVisible","place","useContext","on","queueBack","newQueuesArray","off","id","emit","queueId","screen","SelectQueues","targetKeys","setTargetKeys","setSelectedKeys","labelCol","dataSource","titles","onChange","nextTargetKeys","onSelectChange","sourceSelectedKeys","targetSelectedKeys","render","item","listStyle","width","height","offset","PublicNumbersScreen","dayjs","format","time","setTime","setInterval","alt","src","ticket","index","prefix","number","PublicScreen","setTickets","queuesTrace","setQueuesTrace","nameScreen","setNameScreen","setData","key","includes","splice","Audio","play","PrinterMessage","PrinterOptions","handleQueueSelected","PrinterScreen","showPrintMessage","setShowPrintMessage","setNumber","setTimeout","AppRouter","auth","checking","exact","path","initialState","msgError","rootReducer","combineReducers","action","composeEnhancers","window","__REDUX_DEVTOOLS_EXTENSION_COMPOSE__","compose","store","createStore","applyMiddleware","thunk","TurneroApp","Provider","ReactDOM","getElementById"],"mappings":"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","file":"static/js/main.490fa643.chunk.js","sourcesContent":["const baseUrl = process.env.REACT_APP_API_URL\n\nconst fetchWithoutToken = (endpoint, data, method = 'GET') => {\n\n    const url = `${baseUrl}/${endpoint}`\n\n    if (method === 'GET') {\n        return fetch(url)\n    } else {\n        return fetch(url, {\n            method,\n            headers: {\n                'Content-type': 'application/json'\n            },\n            body: JSON.stringify(data)\n\n        })\n    }\n}\n\nconst fetchWithToken = (endpoint, data, method = 'GET') => {\n\n    const url = `${baseUrl}/${endpoint}`\n    const token = localStorage.getItem('token') || ''\n\n    if (method === 'GET') {\n        return fetch(url, {\n            method,\n            headers: {\n                'x-token': token\n            }\n        })\n    } else {\n        return fetch(url, {\n            method,\n            headers: {\n                'Content-type': 'application/json',\n                'x-token': token\n            },\n            body: JSON.stringify(data)\n        })\n    }\n}\n\nexport {\n    fetchWithoutToken,\n    fetchWithToken\n}\n","\nexport const types = {\n    uiSetError: '[ui] Set Error',\n    uiRemoveError: '[ui] Remove Error',\n\n    uiStartLoading: '[ui] Start Loading',\n    uiStopLoading: '[ui] Stop Loading',\n\n    authStartLogin: '[auth] Start login',\n    authLogin: '[auth] Login',\n    authStartRegister: '[auth] Start Register',\n    authCheckingFinish: '[auth] Finish checking login state',\n    authStartTokenRenew: '[auth] Start Token Renew',\n    authLogout: '[auth] Logout',\n\n    queuesLoaded: '[queue] Queues loaded',\n    queuesNextTicket: '[queue] Next Ticket',\n    queuesAddNewQueue: '[queue] Add New Queue',\n    queuesAddCallPlace: '[queue] Add Call Place',\n    queueLogout: '[queue] Queue Logout',\n}","import { types } from \"../types/types\"\n\nexport const setError = (err) => ({\n    type: types.uiSetError,\n    payload: err\n})\n\nexport const removeError = () => ({\n    type: types.uiRemoveError\n})\n\nexport const startLoading = () => ({\n    type: types.uiStartLoading\n})\n\nexport const stopLoading = () => ({\n    type: types.uiStopLoading\n})","import { fetchWithToken } from \"../helpers/fetch\"\nimport { types } from \"../types/types\"\nimport { stopLoading, startLoading } from \"./ui\"\n\nexport const queuesStartLoading = () => {\n    return async (dispatch) => {\n        dispatch(startLoading())\n\n        try {\n            const resp = await fetchWithToken('queue/getAllUserQueues')\n            const body = await resp.json()\n            dispatch(queueLoaded(body.queues))\n            dispatch(stopLoading())\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}\n\nconst queueLoaded = (queues) => ({\n    type: types.queuesLoaded,\n    payload: queues\n})\n\nexport const newQueue = (payload) => {\n    return async (dispatch) => {\n        try {\n\n            const resp = await fetchWithToken('queue', payload, 'POST')\n            const body = await resp.json()\n            dispatch(addNewQueue(body.queue))\n\n        } catch (error) {\n            console.log(error);\n        }\n    }\n}\n\nconst addNewQueue = (queue) => ({\n    type: types.queuesAddNewQueue,\n    payload: queue\n})\n\nexport const addCallPlace = (name) => ({\n    type: types.queuesAddCallPlace,\n    payload: name\n})\n\nexport const queueLogout = () => ({\n    type: types.queueLogout\n})\n","import { fetchWithoutToken, fetchWithToken } from \"../helpers/fetch\"\nimport { types } from \"../types/types\"\nimport { queueLogout } from \"./queues\"\nimport { startLoading, stopLoading } from \"./ui\"\n\n\nexport const startLogin = (email, password) => {\n    return async (dispatch) => {\n        try {\n            dispatch(startLoading())\n            const resp = await fetchWithoutToken('auth/login', { email, password }, 'POST')\n            const body = await resp.json()\n            dispatch(stopLoading())\n\n            if (body.status) {\n                localStorage.setItem('token', body.token)\n                localStorage.setItem('token-init-date', new Date().getTime())\n\n                dispatch(login({\n                    uid: body.user.uid,\n                    name: body.user.name\n                }))\n            }\n            else {\n                return body\n            }\n        } catch (error) {\n            console.log(error)\n        }\n\n    }\n}\n\nconst login = (user) => ({\n    type: types.authLogin,\n    payload: user\n})\n\nexport const startRegister = (email, password, name) => {\n    return async (dispatch) => {\n\n        const resp = await fetchWithoutToken('auth/register', { email, password, name }, 'POST')\n        const body = await resp.json()\n\n        if (body.status) {\n            localStorage.setItem('token', body.token)\n            localStorage.setItem('token-init-date', new Date().getTime())\n\n            dispatch(login({\n                uid: body.user.uid,\n                name: body.user.name\n            }))\n        } else {\n            return body\n        }\n\n    }\n}\n\nexport const startChecking = () => {\n    return async (dispatch) => {\n        const resp = await fetchWithToken('auth/renew')\n        const body = await resp.json()\n\n        if (body.status) {\n            localStorage.setItem('token', body.token)\n            localStorage.setItem('token-init-date', new Date().getTime())\n\n            dispatch(login({\n                uid: body.user.uid,\n                name: body.user.name\n            }))\n        } else {\n            dispatch(checkingFinish())\n        }\n    }\n}\n\nconst checkingFinish = () => ({ type: types.authCheckingFinish })\n\nexport const startLogout = () => {\n    return (dispatch) => {\n        localStorage.clear()\n        dispatch(queueLogout())\n        dispatch(logout())\n    }\n}\n\nconst logout = () => ({ type: types.authLogout })\n","import {useEffect} from 'react';\n\nconst addBodyClass = className => document.body.classList.add(className);\nconst removeBodyClass = className => document.body.classList.remove(className);\n\nexport default function useBodyClass(className) {\n    useEffect(\n        () => {\n            // Set up\n            className instanceof Array ? className.map(addBodyClass) : addBodyClass(className);\n\n            // Clean up\n            return () => {\n                className instanceof Array\n                    ? className.map(removeBodyClass)\n                    : removeBodyClass(className);\n            };\n        },\n        [className]\n    );\n}","import React from 'react';\nimport { Form, Input, Button, Row, Col, Spin, message } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { startLogin } from '../../actions/auth';\nimport { useHistory } from 'react-router-dom';\nimport useBodyClass from '../../hook/useBodyClass';\n\nexport const LoginScreen = () => {\n    const dispatch = useDispatch()\n    const history = useHistory()\n    const { loading } = useSelector(state => state.ui)\n    useBodyClass(`auth-body`);\n\n    const onFinish = ({ email, password }) => {\n        dispatch(startLogin(email, password))\n            .then(res => {\n                if (res) {\n                    if (!res.status) {\n                        message.error(res.message);\n                    }\n                }\n            })\n    };\n\n    const onFinishFailed = (errorInfo) => {\n        console.log('Failed:', errorInfo);\n    };\n\n    const handleRegisterButton = () => {\n        history.push('/register')\n    }\n\n    return (\n        <>\n            {\n                loading ?\n                    <Spin size=\"large\" />\n                    :\n                    <Row className=\"auth-container\">\n                        <Col span={12}>\n                            <Row className=\"auth-container-box\">\n                                <Col span={24} className=\"auth-form-container\">\n                                    <h1 className=\"auth-title\">Login</h1>\n                                    <Form\n                                        name=\"login\"\n                                        layout=\"vertical\"\n                                        wrapperCol={{\n                                            span: 24,\n                                        }}\n                                        initialValues={{\n                                            remember: true,\n                                        }}\n                                        onFinish={onFinish}\n                                        onFinishFailed={onFinishFailed}\n                                    >\n                                        <Form.Item\n                                            name=\"email\"\n                                            initialValue='1241254@test.com'\n                                            rules={[\n                                                {\n                                                    required: true,\n                                                    type: 'email',\n                                                    message: 'Please input your email!',\n                                                },\n                                            ]}\n                                        >\n                                            <Input\n                                                className=\"auth-input\"\n                                                placeholder=\"EMAIL\"\n                                            />\n                                        </Form.Item>\n\n                                        <Form.Item\n                                            name=\"password\"\n                                            initialValue='124124'\n                                            rules={[\n                                                {\n                                                    required: true,\n                                                    message: 'Please input your password!',\n                                                },\n                                            ]}\n                                        >\n                                            <Input.Password\n                                                className=\"auth-input\"\n                                                placeholder=\"PASSWORD\"\n                                            />\n                                        </Form.Item>\n\n                                        <Form.Item>\n                                            <Button type=\"primary\" htmlType=\"submit\" block className=\"auth-button\" size=\"large\">\n                                                INGRESAR\n                                            </Button>\n                                        </Form.Item>\n                                    </Form>\n                                </Col>\n                            </Row>\n                        </Col>\n                        <Col span={12} className=\"overlay-container\">\n                            <Row className=\"overlay\">\n                                <div className=\"overlay-panel overlay-right\">\n                                    <h1 className=\"text-header\">¿Eres Nuevo?</h1>\n                                    <p>Para crear una cuenta, presiona el botón</p>\n                                    <Button\n                                        ghost={true}\n                                        block\n                                        onClick={handleRegisterButton}\n                                        className=\"auth-button\"\n                                        size=\"large\"\n                                    >\n                                        CREAR CUENTA\n                        </Button>\n                                </div>\n                            </Row>\n                        </Col>\n                    </Row>\n            }\n        </>\n    );\n};","import React from 'react'\nimport { Route, Redirect } from 'react-router-dom'\nimport PropTypes from 'prop-types'\n\nexport const PublicRoute = ({\n    isAuthenticated,\n    component: Component,\n    ...rest\n}) => {\n\n    return (\n        <Route\n            {...rest}\n            component={(props) => (\n                (!isAuthenticated)\n                    ? <Component {...props} />\n                    : <Redirect to=\"/\" />\n            )}\n        />\n    )\n}\n\nPublicRoute.propTypes = {\n    isAuthenticated: PropTypes.bool.isRequired,\n    component: PropTypes.func.isRequired\n}","import React from 'react';\nimport { Form, Input, Button, Row, Col, Spin, message } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { startRegister } from '../../actions/auth';\nimport { useHistory } from 'react-router-dom';\nimport useBodyClass from '../../hook/useBodyClass';\n\nexport const RegisterScreen = () => {\n    const dispatch = useDispatch()\n    const history = useHistory()\n    const { loading } = useSelector(state => state.ui)\n\n    useBodyClass(`auth-body`);\n\n\n    const onFinish = ({ email, password, name }) => {\n        dispatch(startRegister(email, password, name))\n            .then(res => {\n                if (res) {\n                    if (!res.status) {\n                        message.error(res.message);\n                    }\n                }\n            })\n    };\n\n    const onFinishFailed = (errorInfo) => {\n        console.log('Failed:', errorInfo);\n    };\n\n    const handleLoginButton = () => {\n        history.push('/login')\n    }\n\n    return (\n        <>\n            {\n                loading ?\n                    <Spin size=\"large\" />\n                    :\n                    <Row className=\"auth-container\">\n                        <Col span={12}>\n                            <Row className=\"overlay\">\n                                <div className=\"overlay-panel overlay-right\">\n                                    <h1 className=\"text-header\">¿Estás Registrado?</h1>\n                                    <p>Para iniciar sesión, presiona en el botón</p>\n                                    <Button\n                                        ghost={true}\n                                        block\n                                        onClick={handleLoginButton}\n                                        className=\"auth-button\"\n                                        size=\"large\"\n                                    >\n                                        INICIAR SESIÓN\n                        </Button>\n                                </div>\n                            </Row>\n                        </Col>\n                        <Col span={12}>\n                            <Row className=\"auth-container-box\">\n                                <Col span={24} className=\"auth-form-container\">\n                                    <h1 className=\"auth-title\">Registro</h1>\n                                    <Form\n                                        name=\"register\"\n                                        wrapperCol={{\n                                            span: 24,\n                                        }}\n                                        initialValues={{\n                                            remember: true,\n                                        }}\n                                        onFinish={onFinish}\n                                        onFinishFailed={onFinishFailed}\n                                    >\n                                        <Form.Item\n                                            name=\"name\"\n                                            rules={[\n                                                {\n                                                    required: true,\n                                                    message: 'Please input a name!',\n                                                },\n                                            ]}\n                                        >\n                                            <Input\n                                                className=\"auth-input\"\n                                                placeholder=\"NAME\"\n                                            />\n                                        </Form.Item>\n\n                                        <Form.Item\n                                            name=\"email\"\n                                            rules={[\n                                                {\n                                                    required: true,\n                                                    type: 'email',\n                                                    message: 'Please input your email!',\n                                                },\n                                            ]}\n                                        >\n                                            <Input\n                                                className=\"auth-input\"\n                                                placeholder=\"EMAIL\"\n                                            />\n                                        </Form.Item>\n\n                                        <Form.Item\n                                            name=\"password\"\n                                            rules={[\n                                                {\n                                                    required: true,\n                                                    message: 'Please input your password!',\n                                                },\n                                            ]}\n                                        >\n                                            <Input.Password\n                                                className=\"auth-input\"\n                                                placeholder=\"PASSWORD\"\n                                            />\n                                        </Form.Item>\n\n                                        <Form.Item\n                                            name=\"password2\"\n                                            dependencies={['password']}\n                                            rules={[\n                                                {\n                                                    required: true,\n                                                    message: 'Please input your password!',\n                                                },\n                                                ({ getFieldValue }) => ({\n                                                    validator(_, value) {\n                                                        if (!value || getFieldValue('password') === value) {\n                                                            return Promise.resolve();\n                                                        }\n\n                                                        return Promise.reject(new Error('The two passwords that you entered do not match!'));\n                                                    },\n                                                }),\n                                            ]}\n                                        >\n                                            <Input.Password\n                                                placeholder=\"PASSWORD CONFIRM\"\n                                                className=\"auth-input\"\n                                            />\n                                        </Form.Item>\n\n                                        <Form.Item>\n                                            <Button\n                                                type=\"primary\"\n                                                htmlType=\"submit\"\n                                                block\n                                                className=\"auth-button\"\n                                                size=\"large\"\n                                            >\n                                                REGISTRARSE\n                                            </Button>\n                                        </Form.Item>\n                                    </Form>\n                                </Col>\n                            </Row>\n                        </Col>\n                    </Row>\n            }\n        </>\n    );\n};","import React from 'react'\nimport { Route, Redirect } from 'react-router-dom'\nimport PropTypes from 'prop-types'\n\nexport const PrivateRoute = ({\n    isAuthenticated,\n    component: Component,\n    children: Children,\n    ...rest\n}) => {\n\n    localStorage.setItem('lastPath', rest.location.pathname)\n\n    return (\n        <Route\n            {...rest}\n            component={(props) => (\n                (isAuthenticated)\n                    ? <Component {...props} />\n                    : <Redirect to=\"/login\" />\n            )}\n        />\n    )\n}\n\nPrivateRoute.propTypes = {\n    isAuthenticated: PropTypes.bool.isRequired,\n    component: PropTypes.func.isRequired\n}","import { Card, Button, Divider, Row, Col } from 'antd';\nimport React from 'react'\n\nexport const QueueCard = ({ queue, handleNextTicket, actualNumber }) => {\n\n    return (\n        <Card\n            title={queue.description ? queue.description : queue.name}\n            className=\"queue-card-container\"\n            headStyle={{ 'fontSize': '2em', 'justifyContent': 'center', 'display': 'flex' }}\n\n        >\n            <Row>\n                <Col span={12} style={{ 'display': 'flex', 'justifyContent': 'center', 'flexDirection': 'column' }}>\n                    <p className=\"queue-card-body-title-text\">\n                        Total: <span className=\"queue-card-body-info-text\">{queue.lastNumber}</span>\n                    </p>\n                    <p className=\"queue-card-body-title-text\">\n                        Atendidos: <span className=\"queue-card-body-info-text\">{queue.ticketsAttended.length}</span>\n                    </p>\n                    <p className=\"queue-card-body-title-text\">\n                        Pendientes: <span className=\"queue-card-body-info-text\">{queue.tickets.length}</span>\n                    </p>\n                </Col>\n                <Col\n                    span={12}\n                    className=\"queue-card-body-actual-number-container\"\n                >\n                    <p className=\"queue-card-body-actual-number-text\">{`${queue.name}${actualNumber}`}</p>\n                </Col>\n            </Row>\n            <Divider />\n            <Button\n                block\n                type=\"primary\"\n                size=\"large\"\n                onClick={() => handleNextTicket(queue._id)}\n            >\n                LLAMAR SIGUIENTE\n                </Button>\n        </Card>\n    )\n}","import React, { useState } from 'react'\nimport { Button, Input, Form } from 'antd';\nimport Modal from 'antd/lib/modal/Modal';\nimport { useDispatch } from 'react-redux';\nimport { newQueue } from '../../actions/queues';\nimport {\n  PlusOutlined\n} from '@ant-design/icons';\n\nexport const CreateQueueModal = () => {\n  const [isModalVisible, setIsModalVisible] = useState(false);\n  const dispatch = useDispatch()\n\n  const showModal = () => {\n    setIsModalVisible(true);\n  };\n\n  const handleCancel = () => {\n    setIsModalVisible(false);\n  };\n\n  const onCreate = (values) => {\n    dispatch(newQueue(values))\n    setIsModalVisible(false);\n  };\n\n  const [form] = Form.useForm();\n  return (\n    <>\n      <Button\n        type=\"link\"\n        shape=\"rounded\"\n        size='small'\n        onClick={showModal}\n        icon={<PlusOutlined\n          style={{ 'display': 'flex', 'justifyContent': 'center', 'fontSize': '2em', 'fontWeight': 'bold' }}\n        />}\n      >\n      </Button>\n      <Modal\n        title=\"Nueva Fila\"\n        visible={isModalVisible}\n        onOk={() => {\n          form\n            .validateFields()\n            .then(values => {\n              form.resetFields();\n              onCreate(values);\n            })\n            .catch(info => {\n              console.log('Validate Failed:', info);\n            });\n        }}\n        onCancel={handleCancel}>\n        <Form\n          form={form}\n          name=\"form_in_modal\"\n          initialValues={{\n            modifier: 'public',\n          }}\n        >\n          <Form.Item\n            name=\"name\"\n            label=\"Prefijo\"\n            rules={[\n              {\n                required: true,\n                message: 'Ingresar el prefijo de la fila.',\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n          <Form.Item\n            name=\"description\"\n            label=\"Descripción\"\n          >\n            <Input />\n          </Form.Item>\n        </Form>\n      </Modal>\n    </>\n  )\n}\n","import React, { useState } from 'react'\nimport { Layout, Menu, Button, Row, Tooltip, Spin } from 'antd';\nimport {\n  MenuUnfoldOutlined,\n  MenuFoldOutlined,\n  ForkOutlined,\n  VideoCameraOutlined,\n  UploadOutlined,\n  LogoutOutlined,\n} from '@ant-design/icons';\nimport { Link } from 'react-router-dom';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { startLogout } from '../../actions/auth';\n\n\nexport const DashboardScreen = ({ children, keySelected }) => {\n  const [collapsed, setCollapsed] = useState(true)\n  const { Header, Sider, Content } = Layout;\n  const dispatch = useDispatch()\n  const { loading } = useSelector(state => state.ui)\n\n  const toggle = () => {\n    setCollapsed(!collapsed)\n  }\n\n  const handleLogout = () => {\n    dispatch(startLogout())\n  }\n\n\n  return (\n    <Layout style={{ minHeight: '100vh' }}>\n      <Sider trigger={null} collapsible collapsed={collapsed}>\n        <div className=\"logo\" />\n        <Menu\n          theme=\"dark\"\n          mode=\"inline\"\n          selectedKeys={[keySelected]}\n        >\n          <Menu.Item key=\"1\" icon={<ForkOutlined />}>\n            <Link to='/queues'>\n              Filas\n          </Link>\n          </Menu.Item>\n\n          <Menu.Item key=\"2\" icon={<VideoCameraOutlined />}>\n            <Link to='/screen'>\n              Pantallas\n          </Link>\n\n          </Menu.Item>\n          <Menu.Item key=\"3\" icon={<UploadOutlined />}>\n            <Link to='/printer'>\n              Impresora\n          </Link>\n          </Menu.Item>\n        </Menu>\n      </Sider>\n      <Layout className=\"site-layout\">\n        <Header className=\"site-layout-background\" style={{ padding: 0 }}>\n          <Row justify='space-between' align='middle'>\n            {React.createElement(collapsed ? MenuUnfoldOutlined : MenuFoldOutlined, {\n              className: 'trigger',\n              onClick: toggle,\n            })\n            }\n            <Tooltip placement=\"bottom\" title=\"Logout\">\n              <Button\n                type='primary'\n                danger\n                className='logout-button'\n                icon={\n                  <LogoutOutlined\n                    style={{ 'display': 'flex', 'justifyContent': 'center' }}\n                  />}\n                onClick={handleLogout}\n              />\n            </Tooltip>\n          </Row>\n        </Header>\n        <Content\n          className={loading ? 'loading-content' : 'site-layout-background dashboard-content'}\n        >\n\n          {\n            loading ?\n              <Spin size=\"large\" />\n              :\n              children\n          }\n\n        </Content>\n      </Layout>\n    </Layout>\n  )\n}\n","import React from 'react'\nimport { Form, Modal, Input } from 'antd';\nimport { useDispatch } from 'react-redux';\nimport { addCallPlace } from '../../actions/queues';\n\nexport const SetNamePlaceModal = ({isVisible}) => {  \n    const [form] = Form.useForm();\n    const dispatch = useDispatch()\n\n        \n    const onCreate = (values) => {\n        dispatch(addCallPlace(values))\n      };\n\n    return (\n        <Modal\n        title=\"Nombre del lugar de llamado\"\n        visible={isVisible}\n        closable={false}\n        cancelButtonProps={{ hidden: true }}\n        onOk={() => {\n          form\n            .validateFields()\n            .then(values => {\n              form.resetFields();\n              onCreate(values);\n            })\n            .catch(info => {\n              console.log('Validate Failed:', info);\n            });\n        }}\n        >\n        <Form\n          form={form}\n          name=\"form_call_place\"\n          initialValues={{\n            modifier: 'public',\n          }}\n        >\n          <Form.Item\n            name=\"name\"\n            label=\"Lugar\"\n            rules={[\n              {\n                required: true,\n                message: 'Ingresar el nombre del lugar donde realiza el llamado.',\n              },\n            ]}\n          >\n            <Input />\n          </Form.Item>\n        </Form>\n      </Modal>\n    )\n}\n","import React from 'react'\nimport socketio from \"socket.io-client\";\n\nexport const socket = socketio(process.env.REACT_APP_SOCKET);\nexport const SocketContext = React.createContext();","import React, { useEffect, useState, useContext } from 'react'\nimport { QueueCard } from './QueueCard';\nimport { Row, Divider } from 'antd';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { queuesStartLoading } from '../../actions/queues'\nimport { CreateQueueModal } from './CreateQueueModal';\nimport { DashboardScreen } from '../dashboard/DashboardScreen';\nimport { SetNamePlaceModal } from './SetNamePlaceModal';\nimport { SocketContext } from '../../context/socket';\n\nexport const QueueMainScreen = () => {\n    const [queuesLocal, setQueuesLocal] = useState([])\n    const [isSetNamePlaceModalVisible, setIsSetNamePlaceModalVisible] = useState(true);\n    const { queues, place } = useSelector(state => state.queue)\n    const socket = useContext(SocketContext);\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(queuesStartLoading())\n    }, [dispatch])\n\n    useEffect(() => {\n        setQueuesLocal(queues)\n    }, [queues])\n\n    useEffect(() => {\n        !place ?\n            setIsSetNamePlaceModalVisible(true)\n            :\n            setIsSetNamePlaceModalVisible(false)\n    }, [place])\n\n    useEffect(() => {\n        socket.on('queues-change', (queueBack) => {\n            const newQueuesArray = queuesLocal.map(queue => {\n                return queue._id === queueBack._id ? queueBack : queue;\n            });\n\n            setQueuesLocal(newQueuesArray)\n        })\n        return () => {\n            socket.off()\n        }\n    }, [queuesLocal, socket])\n\n    const handleNextTicket = (id) => {\n        socket.emit('next-ticket', { queueId: id, screen: place.name }, ({ status, message, queue: queueBack }) => {\n            if (status) {\n                const newQueuesArray = queuesLocal.map(queue => {\n                    return queue._id === queueBack._id ? queueBack : queue;\n                });\n                setQueuesLocal(newQueuesArray)\n            } else {\n                console.log('next ticket error', message)\n            }\n        })\n    }\n\n    return (\n        <>\n            <SetNamePlaceModal isVisible={isSetNamePlaceModalVisible} />\n            <DashboardScreen keySelected=\"1\">\n                <Row justify=\"center\" align=\"center\" className=\"title\">\n                    Filas\n                            <CreateQueueModal />\n                </Row>\n                <Divider />\n                <Row justify=\"center\">\n\n                    {\n                        queuesLocal.map(queue => (\n                            <QueueCard\n                                queue={queue}\n                                actualNumber={queue.actualNumber}\n                                key={queue._id}\n                                handleNextTicket={handleNextTicket}\n                            ></QueueCard>\n                        ))\n                    }\n\n                </Row>\n            </DashboardScreen>\n        </>\n    )\n}\n","import React, { useState } from 'react'\nimport { Transfer, Button, Input, Form } from 'antd';\n\nexport const SelectQueues = ({onFinish, data}) => {\n    const [targetKeys, setTargetKeys] = useState([]);\n    const [selectedKeys, setSelectedKeys] = useState([]);\n\n    const onChange = (nextTargetKeys) => {\n        setTargetKeys(nextTargetKeys);\n    };\n\n    const onSelectChange = (sourceSelectedKeys, targetSelectedKeys) => {\n        setSelectedKeys([...sourceSelectedKeys, ...targetSelectedKeys]);\n    };\n\n    return (\n        <Form\n            name=\"basic\"\n            labelCol={{\n                span: 24,\n            }}\n            wrapperCol={{\n                span: 24,\n            }}\n            initialValues={{\n                remember: true,\n            }}\n            onFinish={onFinish}\n        >\n            <Form.Item\n                label=\"Seleccione las filas\"\n                name=\"queues\"\n                rules={[\n                    {\n                        required: true,\n                        message: 'Debe seleccionar al menos 1 Fila!',\n                    },\n                ]}\n            >\n                <Transfer\n                    dataSource={data}\n                    titles={['Todas las filas', 'Filas Públicas']}\n                    targetKeys={targetKeys}\n                    selectedKeys={selectedKeys}\n                    onChange={onChange}\n                    onSelectChange={onSelectChange}\n                    render={item => `${item.title}`}\n                    listStyle={{\n                        width: '100%',\n                        height: 250,\n                    }}\n                />\n            </Form.Item>\n            <Form.Item\n                label=\"Nombre de la pantalla\"\n                name=\"name\"\n\n            >\n                <Input />\n            </Form.Item>\n            <Form.Item\n                wrapperCol={{\n                    offset: 11,\n                }}\n            >\n                <Button type=\"primary\" htmlType=\"submit\" size=\"large\">\n                    SIGUIENTE\n        </Button>\n            </Form.Item>\n\n        </Form>\n\n    )\n}\n","import React, { useState } from 'react'\nimport { Col, Row } from 'antd';\nimport useBodyClass from '../../hook/useBodyClass';\nimport * as dayjs from 'dayjs';\n\nexport const PublicNumbersScreen = ({ tickets, name }) => {\n    useBodyClass('public-screen-body');\n    const [time, setTime] = useState(dayjs().format('HH:mm'))\n\n    const timeChange = () => {\n        setTime(dayjs().format('HH:mm'))\n    }\n\n    setInterval(timeChange, 60000)\n\n    return (\n        <>\n            <Row className=\"ps-header-container\" justify=\"space-between\">\n                <span>{time}</span>\n                <span>{name}</span>\n                <span>{dayjs().format('d/M/YYYY')}</span>\n            </Row>\n            <Row className=\"ps-content-container\" justify=\"space-around\" align=\"middle\">\n                <Col span={12} className=\"ps-img-container\">\n                    <img\n                        alt=\"scenerys\"\n                        className=\"ps-img\"\n                        src=\"https://ladefinicion.com/wp-content/uploads/2019/08/paisaje-natural.jpg\" />\n                </Col>\n                <Col span={12} className=\"ps-content-list-numbers\">\n                    {\n                        tickets.map((ticket, index) => {\n                            return (\n                                <div className={\n                                    (index === 0)\n                                        ?\n                                        \"ps-number-call zoom-effect\"\n                                        :\n                                        \"ps-number-call\"\n                                }\n                                    key={ticket._id}\n                                >\n                                    <span>{ticket.screen}</span>\n                                    <span className=\"ps-number-divider\"></span>\n                                    <span>{`${ticket.prefix}${ticket.number}`}</span>\n                                </div>\n                            )\n                        })\n                    }\n                </Col>\n            </Row>\n        </>\n    )\n}\n","import React, { useContext, useState, useEffect } from 'react'\nimport { DashboardScreen } from '../dashboard/DashboardScreen'\nimport { SocketContext } from '../../context/socket';\nimport { SelectQueues } from './SelectQueues';\nimport { Divider, Row } from 'antd';\nimport { PublicNumbersScreen } from './PublicNumbersScreen';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { queuesStartLoading } from '../../actions/queues';\n\nexport const PublicScreen = () => {\n    const socket = useContext(SocketContext);\n    const [tickets, setTickets] = useState([])\n    const [queuesTrace, setQueuesTrace] = useState([])\n    const [nameScreen, setNameScreen] = useState('')\n    const [data, setData] = useState([]);\n    const { queues } = useSelector(state => state.queue)\n    const dispatch = useDispatch()\n\n    useEffect(() => {\n        dispatch(queuesStartLoading())\n    }, [dispatch])\n   \n    useEffect(() => {\n        const data = queues.map(({ _id: key, name: title, description }) => {\n            if (description) {\n                title = description + '-' + title\n            }\n            return { key, title, description }\n        })\n        setData(data)\n    }, [queues])\n\n    const handlePublicScreenData = ({ queues, name }) => {\n        setQueuesTrace(queues)\n        setNameScreen(name)\n    };\n\n    useEffect(() => {\n        socket.on('queues-change', (queueBack, ticket = null) => {\n            if (queuesTrace.includes(queueBack._id) && ticket) {\n                ticket.prefix = queueBack.name\n                if(tickets.length > 5){\n                    tickets.splice(-1,1)\n                }\n                setTickets([ticket, ...tickets])\n                new Audio('./turnero-front/audio/next-ticket.mp3').play()\n            }\n        })\n        return () => {\n            socket.off()\n        }\n    }, [socket, tickets, queuesTrace])\n\n    return (\n        <>\n            {\n                !queuesTrace.length > 0\n                    ?\n                    <DashboardScreen keySelected=\"2\">\n                        <Row justify=\"center\" align=\"center\" className=\"title\">\n                            Configuración de Pantalla Pública\n                        </Row>\n                        <Divider />\n                        <SelectQueues onFinish={handlePublicScreenData} data={data} />\n                    </DashboardScreen>\n                    :\n                    <PublicNumbersScreen tickets={tickets} name={nameScreen} />\n            }\n        </>\n\n    )\n}\n","import React from 'react'\n\nexport const PrinterMessage = ({number}) => {\n    return (\n        <div className=\"printer-message-container\">\n        <p\n            className=\"printer-message-default\"\n        >\n            Usted será llamado por el número\n    </p>\n    <div className=\"printer-message-number-container\">\n\n        <span className=\"printer-message-number\">\n            {number}\n        </span>\n    </div>\n    </div>\n    )\n}\n","import React from 'react'\nimport { Row, Button } from 'antd'\n\nexport const PrinterOptions = ({queues, handleQueueSelected}) => {\n    return (\n        <div>\n            {\n            queues.map(queue => {\n                        return (\n            <Row\n                justify=\"center\"\n                key={queue._id}\n            >\n                <Button\n                    className=\"printer-option-button\"\n                    type=\"primary\"\n                    onClick={() => handleQueueSelected(queue)}>\n                    {queue.description ? queue.description : queue.name}\n                </Button>\n            </Row>\n                        )\n                    })\n                }\n        </div>\n    )\n}\n","import React, { useEffect, useState } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport { queuesStartLoading } from '../../actions/queues'\nimport { socket } from '../../context/socket'\nimport useBodyClass from '../../hook/useBodyClass'\nimport { PrinterMessage } from './PrinterMessage'\nimport { PrinterOptions } from './PrinterOptions'\n\nexport const PrinterScreen = () => {\n    const [showPrintMessage, setShowPrintMessage] = useState(false)\n    const [number, setNumber] = useState(null)\n    const { queues } = useSelector(state => state.queue)\n    const dispatch = useDispatch()\n    useBodyClass('printer-body')\n\n    useEffect(() => {\n        dispatch(queuesStartLoading())\n    }, [dispatch])\n\n    const handleQueueSelected = ({ _id: id }) => {\n        socket.emit('new-ticket', { queueId: id }, ({ status, message, queue }) => {\n            if (status) {\n                setNumber(`${queue.name}${queue.lastNumber}`)\n                setShowPrintMessage(true)\n                setTimeout(() => {\n                    setShowPrintMessage(false)\n                }, 3000);\n            } else {\n                console.log(message)\n            }\n        })\n    }\n\n    return (\n        <>\n            {\n                !showPrintMessage ?\n                    <PrinterOptions queues={queues} handleQueueSelected={handleQueueSelected}/>\n                    :\n                    <PrinterMessage number={number} />\n            }\n        </>\n    )\n}\n","import React, { useEffect } from 'react'\nimport {\n    BrowserRouter as Router,\n    Switch,\n    Redirect\n} from \"react-router-dom\";\nimport { LoginScreen } from '../components/auth/LoginScreen';\nimport { PublicRoute } from './PublicRoute';\nimport { RegisterScreen } from '../components/auth/RegisterScreen';\nimport { useDispatch, useSelector } from 'react-redux';\nimport { startChecking } from '../actions/auth';\nimport { PrivateRoute } from './PrivateRoute';\nimport { QueueMainScreen } from '../components/queue/QueueMainScreen';\nimport { PublicScreen } from '../components/screen/PublicScreen';\nimport { PrinterScreen } from '../components/printer/PrinterScreen';\nimport { DashboardScreen } from '../components/dashboard/DashboardScreen';\nimport { Spin } from 'antd';\n\n\nexport const AppRouter = () => {\n\n    const dispatch = useDispatch()\n    const { checking, uid } = useSelector(state => state.auth)\n\n    useEffect(() => {\n        dispatch(startChecking())\n    }, [dispatch])\n\n    if (checking) {\n        return (<Spin className=\"spinner-body\" size=\"large\"/>)\n    }\n\n    return (\n        <Router>\n            <div>\n                <Switch>\n                    <PublicRoute\n                        exact\n                        path=\"/login\"\n                        component={LoginScreen}\n                        isAuthenticated={!!uid}\n                    />\n\n                    <PublicRoute\n                        exact\n                        path=\"/register\"\n                        component={RegisterScreen}\n                        isAuthenticated={!!uid}\n                    />\n\n                    <PrivateRoute\n                        exact\n                        path=\"/\"\n                        isAuthenticated={!!uid}\n                        component={DashboardScreen}\n                    />\n\n                    <PrivateRoute\n                        exact\n                        path=\"/queues\"\n                        isAuthenticated={!!uid}\n                        component={QueueMainScreen}\n                    />\n\n                    <PrivateRoute\n                        exact\n                        path=\"/screen\"\n                        isAuthenticated={!!uid}\n                        component={PublicScreen}\n                    />\n\n                    <PrivateRoute\n                        exact\n                        path=\"/printer\"\n                        isAuthenticated={!!uid}\n                        component={PrinterScreen}\n                    />\n\n                    <Redirect to=\"/\" />\n                </Switch>\n            </div>\n        </Router>\n    )\n}","import { types } from \"../types/types\";\n\nconst initialState = {\n    checking: true\n}\n\nexport const authReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n        case types.authLogin:\n            return {\n                ...state,\n                ...action.payload,\n                checking: false\n            }\n\n        case types.authCheckingFinish:\n            return {\n                ...state,\n                checking: false\n            }\n\n        case types.authLogout:\n            return {\n                checking: false\n            }\n\n        default:\n            return state;\n    }\n}\n","import { types } from \"../types/types\";\n\nconst initialState = {\n    queues: [],\n    place: '',\n}\n\nexport const queueReducer = (state = initialState, action) => {\n\n    switch (action.type) {\n        case types.queuesLoaded:\n            return {\n                ...state,\n                queues: [...action.payload]\n            }\n\n        case types.queuesAddNewQueue:\n            return {\n                ...state,\n                queues: [\n                    ...state.queues,\n                    action.payload\n                ]\n            }\n\n        case types.queuesAddCallPlace:\n            return {\n                ...state,\n                place: action.payload\n            }\n\n        case types.queueLogout:\n            return {\n                ...initialState\n            }\n\n        default:\n            return state;\n    }\n}\n","import { types } from \"../types/types\";\n\nconst initialState = {\n    loading: false,\n    msgError: null\n}\n\nexport const uiReducer = (state = initialState, action) => {\n    switch (action.type) {\n        case types.uiSetError:\n            return {\n                ...state,\n                msgError: action.payload\n            }\n        case types.uiRemoveError:\n            return {\n                ...state,\n                msgError: null\n            }\n\n        case types.uiStartLoading:\n            return {\n                ...state,\n                loading: true\n            }\n        case types.uiStopLoading:\n            return {\n                ...state,\n                loading: false\n            }\n\n        default:\n            return state;\n    }\n}","import { combineReducers } from \"redux\";\nimport { authReducer } from \"./authReducer\";\nimport { queueReducer } from \"./queueReducer\";\nimport { uiReducer } from \"./uiReducer\";\n\nexport const rootReducer = combineReducers({\n    auth: authReducer,\n    queue: queueReducer,\n    ui: uiReducer\n})","import { createStore, compose, applyMiddleware } from \"redux\";\nimport { rootReducer } from \"../reducers/rootReducer\";\nimport thunk from \"redux-thunk\";\n\n\nconst composeEnhancers = (typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__) || compose;\n\nexport const store = createStore(\n    rootReducer,\n    composeEnhancers(\n        applyMiddleware(thunk)\n    )\n)","import React from 'react'\nimport { AppRouter } from './router/AppRouter'\nimport { Provider } from 'react-redux'\nimport { store } from './store/store'\nimport { socket, SocketContext } from './context/socket'\nimport { BrowserRouter } from 'react-router-dom'\n\nexport const TurneroApp = () => {\n    return (\n        <SocketContext.Provider value={socket}>\n            <Provider store={store} >\n                <BrowserRouter>\n                    <AppRouter />\n                </BrowserRouter>\n            </Provider>\n        </SocketContext.Provider>\n    )\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { TurneroApp } from './TurneroApp';\nimport './app.css'\n\nReactDOM.render(\n    <TurneroApp />,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}